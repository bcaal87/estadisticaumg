@model StatisticalUMG.Models.BayesModel
@{
    ViewData["Title"] = "Resultados de Probabilidad Bayesiana";
}

<h2>Resultados de Probabilidad Bayesiana</h2>

@if (Model.PosteriorProbability != 0)
{
    <div class="result-cards">
        <div class="card">
            <h3>Resultado</h3>
            <h4>P(A|B) = @Model.PosteriorProbability</h4>
            <h4>Pasos del Cálculo:</h4>
            <ul>
                @foreach (var step in Model.CalculationSteps)
                {
                    <li>@step</li>
                }
            </ul>
        </div>

        <div class="card">
            <h3>Árbol de Probabilidades</h3>
            <pre>
                @foreach (var node in Model.ProbabilityTree)
                {
                    @node
                }
                </pre>

            <!-- Diagrama del árbol (usando D3.js) -->
            <div id="tree-container" style="width: 100%; height: 300px;"></div>
        </div>
    </div>

    <!-- Botón para realizar otro cálculo -->
    <div class="text-center">
        <form asp-controller="Bayes" asp-action="InputBayes" method="get">
            <button type="submit" class="btn btn-primary">Realizar otro cálculo</button>
        </form>
    </div>
}

<!-- Incluye la biblioteca de D3.js -->
<script src="https://d3js.org/d3.v7.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const treeData = {
            name: "Probabilidad Inicial",
            children: [
                {
                    name: `P(A) = @Model.PriorProbability`,
                    children: [
                        { name: `P(B|A) = @Model.Likelihood` }
                    ]
                },
                {
                    name: `P(B) = @Model.MarginalProbability`
                }
            ]
        };

        const width = 600;
        const height = 300;

        const svg = d3.select("#tree-container").append("svg")
            .attr("width", width)
            .attr("height", height);

        const g = svg.append("g")
            .attr("transform", "translate(40,0)");

        const tree = d3.tree().size([height, width - 160]);

        const root = d3.hierarchy(treeData);

        tree(root);

        const link = g.selectAll(".link")
            .data(root.descendants().slice(1))
            .enter().append("path")
            .attr("class", "link")
            .attr("d", d => `
                    M${d.y},${d.x}
                    C${(d.y + d.parent.y) / 2},${d.x}
                    ${(d.y + d.parent.y) / 2},${d.parent.x}
                    ${d.parent.y},${d.parent.x}
                `)
            .attr("fill", "none")
            .attr("stroke", "#ccc")
            .attr("stroke-width", 2);

        const node = g.selectAll(".node")
            .data(root.descendants())
            .enter().append("g")
            .attr("class", "node")
            .attr("transform", d => `translate(${d.y},${d.x})`);

        node.append("circle")
            .attr("r", 5)
            .attr("fill", "#69b3a2");

        node.append("text")
            .attr("dy", 3)
            .attr("x", d => d.children ? -8 : 8)
            .style("text-anchor", d => d.children ? "end" : "start")
            .text(d => d.data.name);
    });
</script>

<style>
    .result-cards {
        display: flex;
        justify-content: space-around;
        margin: 20px 0;
    }

    .card {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 15px;
        width: 45%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .card h3 {
            margin-top: 0;
        }

    pre {
        background: #f9f9f9;
        padding: 10px;
        border-radius: 4px;
        overflow: auto;
    }

    .text-center {
        text-align: center;
        margin-top: 20px;
    }
</style>


